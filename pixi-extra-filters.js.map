{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/index","src/filters/glow/GlowFilter.js","src/filters/outline/OutlineFilter.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"pixi-extra-filters.js","sourceRoot":"./","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports = {\r\n    GlowFilter: require('./filters/glow/GlowFilter'),\r\n    OutlineFilter: require('./filters/outline/OutlineFilter')\r\n};\r\n\r\nfor (var filter in module.exports) {\r\n    PIXI.filters[filter] = module.exports[filter];\r\n}\r\n","/**\r\n * GlowFilter, originally by mishaa\r\n * http://www.html5gamedevs.com/topic/12756-glow-filter/?hl=mishaa#entry73578\r\n * http://codepen.io/mishaa/pen/raKzrm\r\n * \r\n * @class\r\n * @param viewWidth {number} The width of the view to draw to, usually renderer.width.\r\n * @param viewHeight {number} The height of the view to draw to, usually renderer.height.\r\n * @param outerStrength {number} The strength of the glow outward from the edge of the sprite.\r\n * @param innerStrength {number} The strength of the glow inward from the edge of the sprite.\r\n * @param color {number} The color of the glow.\r\n * @param quality {number} A number between 0 and 1 that describes the quality of the glow.\r\n * \r\n * @example\r\n *  someSprite.filters = [\r\n *      new GlowFilter(renderer.width, renderer.height, 15, 2, 1, 0xFF0000, 0.5)\r\n *  ];\r\n */\r\nfunction GlowFilter(viewWidth, viewHeight, distance, outerStrength, innerStrength, color, quality) {\r\n    PIXI.filters.AbstractFilter.call(this,\r\n        // vertex shader\r\n        null,\r\n        // fragment shader\r\n        [\r\n            'precision mediump float;',\r\n\r\n            'varying vec2 vTextureCoord;',\r\n            'varying vec4 vColor;',\r\n\r\n            'uniform sampler2D uSampler;',\r\n\r\n            'uniform float distance;',\r\n            'uniform float outerStrength;',\r\n            'uniform float innerStrength;',\r\n            'uniform vec4 glowColor;',\r\n            'uniform float pixelWidth;',\r\n            'uniform float pixelHeight;',\r\n            'vec2 px = vec2(pixelWidth, pixelHeight);',\r\n\r\n            'void main(void) {',\r\n            '    const float PI = 3.14159265358979323846264;',\r\n            '    vec4 ownColor = texture2D(uSampler, vTextureCoord);',\r\n            '    vec4 curColor;',\r\n            '    float totalAlpha = 0.0;',\r\n            '    float maxTotalAlpha = 0.0;',\r\n            '    float cosAngle;',\r\n            '    float sinAngle;',\r\n            '    for (float angle = 0.0; angle <= PI * 2.0; angle += ' + (1 / quality / distance).toFixed(7) + ') {',\r\n            '       cosAngle = cos(angle);',\r\n            '       sinAngle = sin(angle);',\r\n            '       for (float curDistance = 1.0; curDistance <= ' + distance.toFixed(7) + '; curDistance++) {',\r\n            '           curColor = texture2D(uSampler, vec2(vTextureCoord.x + cosAngle * curDistance * px.x, vTextureCoord.y + sinAngle * curDistance * px.y));',\r\n            '           totalAlpha += (distance - curDistance) * curColor.a;',\r\n            '           maxTotalAlpha += (distance - curDistance);',\r\n            '       }',\r\n            '    }',\r\n            '    maxTotalAlpha = max(maxTotalAlpha, 0.0001);',\r\n    \r\n            '    ownColor.a = max(ownColor.a, 0.0001);',\r\n            '    ownColor.rgb = ownColor.rgb / ownColor.a;',\r\n            '    float outerGlowAlpha = (totalAlpha / maxTotalAlpha)  * outerStrength * (1. - ownColor.a);',\r\n            '    float innerGlowAlpha = ((maxTotalAlpha - totalAlpha) / maxTotalAlpha) * innerStrength * ownColor.a;',\r\n            '    float resultAlpha = (ownColor.a + outerGlowAlpha);',\r\n            \r\n            '    gl_FragColor = vec4(mix(mix(ownColor.rgb, glowColor.rgb, innerGlowAlpha / ownColor.a), glowColor.rgb, outerGlowAlpha / resultAlpha) * resultAlpha, resultAlpha);',\r\n            '}'\r\n        ].join('\\n'),\r\n        // custom uniforms\r\n        {\r\n            distance: { type: '1f', value: distance },\r\n            outerStrength: { type: '1f', value: 0 },\r\n            innerStrength: { type: '1f', value: 0 },\r\n            glowColor: { type: '4f', value: new Float32Array([0, 0, 0, 1]) },\r\n            pixelWidth: { type: '1f', value: 0 },\r\n            pixelHeight: { type: '1f', value: 0 }\r\n        }\r\n    );\r\n\r\n    quality = Math.pow(quality, 1/3);\r\n    this.quality = quality;\r\n\r\n    this.uniforms.distance.value *= quality;\r\n\r\n    viewWidth *= quality;\r\n    viewHeight *= quality;\r\n\r\n    this.color = color;\r\n    this.outerStrength = outerStrength;\r\n    this.innerStrength = innerStrength;\r\n    this.viewWidth = viewWidth;\r\n    this.viewHeight = viewHeight;\r\n};\r\n\r\nGlowFilter.prototype = Object.create(PIXI.filters.AbstractFilter.prototype);\r\nGlowFilter.prototype.constructor = GlowFilter;\r\nmodule.exports = GlowFilter;\r\n\r\nObject.defineProperties(GlowFilter.prototype, {\r\n    color: {\r\n        get: function () {\r\n            return PIXI.utils.rgb2hex(this.uniforms.glowColor.value);\r\n        },\r\n        set: function(value) {\r\n            PIXI.utils.hex2rgb(value, this.uniforms.glowColor.value);\r\n        }\r\n    },\r\n\r\n    outerStrength: {\r\n        get: function () {\r\n            return this.uniforms.outerStrength.value;\r\n        },\r\n        set: function (value) {\r\n            this.uniforms.outerStrength.value = value;\r\n        }\r\n    },\r\n\r\n    innerStrength: {\r\n        get: function () {\r\n            return this.uniforms.innerStrength.value;\r\n        },\r\n        set: function (value) {\r\n            this.uniforms.innerStrength.value = value;\r\n        }\r\n    },\r\n\r\n    viewWidth: {\r\n        get: function () {\r\n            return 1 / this.uniforms.pixelWidth.value;\r\n        },\r\n        set: function(value) {\r\n            this.uniforms.pixelWidth.value = 1 / value;\r\n        }\r\n    },\r\n\r\n    viewHeight: {\r\n        get: function () {\r\n            return 1 / this.uniforms.pixelHeight.value;\r\n        },\r\n        set: function(value) {\r\n            this.uniforms.pixelHeight.value = 1 / value;\r\n        }\r\n    }\r\n});\r\n","/**\r\n * OutlineFilter, originally by mishaa\r\n * http://www.html5gamedevs.com/topic/10640-outline-a-sprite-change-certain-colors/?p=69966\r\n * http://codepen.io/mishaa/pen/emGNRB\r\n * \r\n * @class\r\n * @param viewWidth {number} The width of the view to draw to, usually renderer.width.\r\n * @param viewHeight {number} The height of the view to draw to, usually renderer.height.\r\n * @param thickness {number} The tickness of the outline.\r\n * @param color {number} The color of the glow.\r\n * \r\n * @example\r\n *  someSprite.shader = new OutlineFilter(renderer.width, renderer.height, 9, 0xFF0000);\r\n */\r\nfunction OutlineFilter(viewWidth, viewHeight, thickness, color) {\r\n    PIXI.filters.AbstractFilter.call(this,\r\n        // vertex shader\r\n        null,\r\n        // fragment shader\r\n        [\r\n            'precision mediump float;',\r\n\r\n            'varying vec2 vTextureCoord;',\r\n            'uniform sampler2D uSampler;',\r\n\r\n            'uniform float thickness;',\r\n            'uniform vec4 outlineColor;',\r\n            'uniform float pixelWidth;',\r\n            'uniform float pixelHeight;',\r\n            'vec2 px = vec2(pixelWidth, pixelHeight);',\r\n\r\n            'void main(void) {',\r\n            '    const float PI = 3.14159265358979323846264;',\r\n            '    vec4 ownColor = texture2D(uSampler, vTextureCoord);',\r\n            '    vec4 curColor;',\r\n            '    float maxAlpha = 0.;',\r\n            '    for (float angle = 0.; angle < PI * 2.; angle += ' + (1 / thickness).toFixed(7) + ') {',\r\n            '        curColor = texture2D(uSampler, vec2(vTextureCoord.x + thickness * px.x * cos(angle), vTextureCoord.y + thickness * px.y * sin(angle)));',\r\n            '        maxAlpha = max(maxAlpha, curColor.a);',\r\n            '    }',\r\n            '    float resultAlpha = max(maxAlpha, ownColor.a);',\r\n            '    gl_FragColor = vec4((ownColor.rgb + outlineColor.rgb * (1. - ownColor.a)) * resultAlpha, resultAlpha);',\r\n            '}'\r\n        ].join('\\n'),\r\n        // custom uniforms\r\n        {\r\n            thickness: { type: '1f', value: thickness },\r\n            outlineColor: { type: '4f', value: new Float32Array([0, 0, 0, 1]) },\r\n            pixelWidth: { type: '1f', value: null },\r\n            pixelHeight: { type: '1f', value: null },\r\n        }\r\n    );\r\n\r\n    this.color = color;\r\n    this.viewWidth = viewWidth;\r\n    this.viewHeight = viewHeight;\r\n};\r\n\r\nOutlineFilter.prototype = Object.create(PIXI.filters.AbstractFilter.prototype);\r\nOutlineFilter.prototype.constructor = OutlineFilter;\r\nmodule.exports = OutlineFilter;\r\n\r\nObject.defineProperties(OutlineFilter.prototype, {\r\n    color: {\r\n        get: function () {\r\n            return PIXI.utils.rgb2hex(this.uniforms.outlineColor.value);\r\n        },\r\n        set: function (value) {\r\n            PIXI.utils.hex2rgb(value, this.uniforms.outlineColor.value);\r\n        }\r\n    },\r\n    \r\n    viewWidth: {\r\n        get: function () {\r\n            return 1 / this.uniforms.pixelWidth.value;\r\n        },\r\n        set: function(value) {\r\n            this.uniforms.pixelWidth.value = 1 / value;\r\n        }\r\n    },\r\n    \r\n    viewHeight: {\r\n        get: function () {\r\n            return 1 / this.uniforms.pixelHeight.value;\r\n        },\r\n        set: function(value) {\r\n            this.uniforms.pixelHeight.value = 1 / value;\r\n        }\r\n    }\r\n});\r\n"]}